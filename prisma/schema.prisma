generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model course {
  id                 String              @id @db.VarChar(100)
  title              String?             @db.VarChar(128)
  description_course String              @db.VarChar(128)
  price              Decimal             @db.Decimal(8, 2)
  cover              String?             @db.VarChar(100)
  educator_id        String              @db.VarChar(100)
  created_at         DateTime?           @default(now()) @db.Timestamp(6)
  updated_at         DateTime?           @default(now()) @db.Timestamp(6)
  educator           educator            @relation(fields: [educator_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_educator_id")
  course_student     course_student[]
  evaluation_course  evaluation_course[]
  promotion          promotion[]
  video              video[]
}

model course_student {
  id         String  @id @db.VarChar(100)
  course_id  String  @db.VarChar(128)
  student_id String  @db.VarChar(128)
  course     course  @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_course_id")
  student    student @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_studentid")
}

model educator {
  id                  String                @id @db.VarChar(100)
  users_id            String                @unique @db.VarChar(128)
  course              course[]
  users               users                 @relation(fields: [users_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
  evaluation_educator evaluation_educator[]
}

model evaluation {
  id                  String                @id @db.VarChar(100)
  stars               Int                   @db.SmallInt
  comments            String                @db.VarChar(5)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  updated_at          DateTime?             @default(now()) @db.Timestamp(6)
  evaluation_course   evaluation_course[]
  evaluation_educator evaluation_educator[]
  evaluation_video    evaluation_video[]
}

model evaluation_course {
  id           String     @id @db.VarChar(100)
  course_id    String     @db.VarChar(100)
  evalution_id String     @db.VarChar(100)
  course       course     @relation(fields: [course_id], references: [id], onDelete: Cascade, map: "fkcourse_id")
  evaluation   evaluation @relation(fields: [evalution_id], references: [id], onDelete: Cascade, map: "fkevalution_id")
}

model evaluation_educator {
  id            String     @id @db.VarChar(100)
  educador_id   String     @db.VarChar(128)
  evaluation_id String     @db.VarChar(128)
  educator      educator   @relation(fields: [educador_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_educador_id")
  evaluation    evaluation @relation(fields: [evaluation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_evaluation_id")
}

model evaluation_video {
  id            String     @id @db.VarChar(100)
  video_id      String     @db.VarChar(100)
  evaluation_id String     @db.VarChar(100)
  evaluation    evaluation @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, map: "fkevalution_id")
  video         video      @relation(fields: [video_id], references: [id], onDelete: Cascade, map: "fkvideo_id")
}

model promotion {
  id         String    @id @db.VarChar(100)
  price      Decimal   @db.Decimal(8, 2)
  course_id  String    @db.VarChar(100)
  start_date DateTime? @default(now()) @db.Timestamp(6)
  end_date   DateTime? @default(now()) @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  update_at  DateTime? @default(now()) @db.Timestamp(6)
  course     course    @relation(fields: [course_id], references: [id], onDelete: Cascade, map: "fkcourseid")
}

model student {
  id             String           @id @db.VarChar(100)
  users_id       String           @unique @db.VarChar(128)
  course_student course_student[]
  users          users            @relation(fields: [users_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_usersid")
}

model users {
  id           String    @id @db.VarChar(100)
  first_name   String    @db.VarChar(100)
  last_name    String    @db.VarChar(100)
  email        String    @unique @db.VarChar(254)
  cpf          String?   @unique @db.VarChar(11)
  password     String    @db.VarChar(254)
  nationality  String    @db.VarChar(50)
  birth        DateTime  @db.Date
  phone_number String?   @db.VarChar(30)
  bio          String?
  avatar       String?   @db.VarChar(200)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  educator     educator?
  student      student?
}

model video {
  id               String             @id @db.VarChar(100)
  title            String             @db.VarChar(128)
  link             String             @db.VarChar(128)
  description      String             @db.VarChar(128)
  course_id        String?            @db.VarChar(100)
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  update_at        DateTime?          @default(now()) @db.Timestamp(6)
  evaluation_video evaluation_video[]
  course           course?            @relation(fields: [course_id], references: [id], onDelete: Cascade, map: "fk_courseid")
}
